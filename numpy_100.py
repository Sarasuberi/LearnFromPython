import numpy as np


"""初级练习题"""
"""数组创建与基本操作"""
print("数组创建与基本操作")
print("---------------------")
# 1.创建一个长度为10的一维全零数组
zero_ten = np.zeros(10)
print(f"一维全零数组：{zero_ten}")
print("---------------------")
# 2.创建一个3x3的二维全1数组
three_three = np.ones((3, 3))
print(f"3x3二维全1数组：\n{three_three}")
print("---------------------")
# 3.创建一个5x5的单位矩阵
matrix = np.eye(5)
print(f"5x5单位矩阵：\n{matrix}")
print("---------------------")
# 4.创建一个从0到9的一维数组
one_array = np.arange(10)
print(f"从0到9的一维数组：{one_array}")
print("---------------------")
# 5.创建一个从10到49的一维数组
ten_four_nine = np.arange(10, 50)
print(f"从10到49的一维数组：{ten_four_nine}")
print("---------------------")
# 6.创建一个包含20个元素的等差数列，从0到1
# 7.创建一个3x3的随机数组(值在0-1之间)
random_three_three = np.random.rand(3, 3)
print(f"3x3随机数组：\n{random_three_three}")
print("---------------------")
# 8.创建一个10x10的随机数组并找出最大值和最小值
random_ten_ten = np.random.rand(10, 10)
print(f"10x10随机数组：\n{random_ten_ten}")
print(f"最大值：{random_ten_ten.max()}")
print(f"最小值：{random_ten_ten.min()}")
print("---------------------")
# 9.创建一个8x8的棋盘式数组(黑白相间)   切片不熟练
chessboard = np.zeros((8, 8), dtype=int)
chessboard[1::2, ::2] = 1
chessboard[::2, 1::2] = 1
print(f"8x8棋盘式数组：\n{chessboard}")
print("---------------------")
# 10.创建一个自定义的5x5数组并打印其数据类型
customize = np.arange(25).reshape(5, 5)
print(f"自定义5x5数组：\n{customize}\n数据类型：{customize.dtype}")
print("---------------------")

"""数组索引与切片"""
print("数组索引与切片")
print("---------------------")
# 1.创建一个10x10数组，并提取第3行第5列的元素
ten_ten = np.arange(100).reshape(10, 10)
print(f"10x10数组：\n{ten_ten}")
print("---------------------")
three_five = ten_ten[2, 4]
print(f"第3行第5列的元素：{three_five}")
print("---------------------")
# 2.提取一个数组的所有偶数索引元素
even_index = ten_ten[::2, ::2]
print(f"所有偶数索引元素：\n{even_index}")
print("---------------------")
# 3.将一个数组的所有大于5的元素替换为1，其余为0
replace = np.where(ten_ten > 5, 1, 0)
print(f"替换后的数组：\n{replace}")
print("---------------------")
# 4.提取一个二维数组的第2列
second_column = ten_ten[:, 1]
print(f"第2列：\n{second_column}")
print("---------------------")
# 5.反转一个一维数组
change_one_array = one_array[::-1]
print(f"反转后的一维数组：{change_one_array}")
print("---------------------")
# 6.反转一个二维数组的行
change_two_array_row = customize[::-1, :]
print(f"反转行后的二维数组：\n{change_two_array_row}")
print("---------------------")
# 7.反转一个二维数组的列
change_two_array_column = customize[:, ::-1]
print(f"反转列后的二维数组：\n{change_two_array_column}")
print("---------------------")
# 8.创建一个10x10数组，并提取其中3x3的子数组
sub_array = ten_ten[2:5, 2:5]
print(f"3x3子数组：\n{sub_array}")
print("---------------------")
# 9.使用布尔索引提取数组中大于5的元素
# 10.使用花式索引从数组中提取特定位置的元素
print("---------------------")
"""数组操作"""
print("数组操作")
print("---------------------")
# 1.将两个一维数组垂直堆叠
# 2.将两个一维数组水平堆叠
# 3.将一个一维数组转换为二维行向量
# 4.将一个-维数组转换为二维列向量
# 5.计算两个数组的点积
# 6.计算两个数组的元素乘积
# 7.计算数组的转置
# 8.展平一个多维数组
# 9.改变数组的形状而不改变数据
# 10.计算数组的维度
print("---------------------")
"""基本数学运算"""
print("基本数学运算")
print("---------------------")
# 1.计算数组所有元素的和
# 2.计算数组每列的和
# 3.计算数组每行的平均值
# 4.计算数组的标准差
# 5.计算数组的累积和
# 6.计算数组元素的绝对值7.计算数组元素的平方根
# 8.计算数组元素的平方
# 9.计算数组元素的指数
# 10.计算两个数组的欧几里得距离
print("---------------------")
"""中级练习题"""
"""数组操作进阶"""
print("数组操作进阶")
print("---------------------")
# 1.找到数组中最大值的索引
# 2.找到数组中前5个最大值的索引
# 3.对一个数组进行归一化(0-1范围)
# 4.对一个数组进行标准化(均值为0，标准差为1)
# 5.计算数组的移动平均值
# 6.计算数组的差分
# 7.计算数组的梯度
# 8.对数组进行排序
# 9.对数组的每行进行排序
# 10.对数组的每列进行排序
print("---------------------")
"""逻辑操作与过滤"""
print("逻辑操作与过滤")
print("---------------------")
# 1.提取数组中所有唯一元素
# 2.计算数组中每个元素的出现次数
# 3.提取数组中所有非零元素的索引
# 4.检查两个数组是否相等
# 5.检查数组是否有NaN值
# 6.替换数组中的所有NaN值为0
# 7.提取数组中所有大于平均值的数据
# 8.计算数组中满足条件的元素数量
# 9.对数组应用自定义函数
# 10.使用where函数替换数组元素
print("---------------------")
"""随机数与统计"""
print("随机数与统计")
print("---------------------")
# 1.生成10个0-1之间的随机数
# 2.生成10个符合正态分布的随机数
# 3.生成10个整数随机数（范围1-100）
# 4.随机打乱一个数组
# 5.从数组中进行随机抽样
# 6.计算数组的百分位数
# 7.计算数组的协方差矩阵
# 8.计算数组的相关系数矩阵
# 9.计算数组的直方图
# 10.计算数组的累计分布函数
print("---------------------")
"""线性代数运算"""
print("线性代数运算")
print("---------------------")
# 1.计算矩阵的行列式
# 2.计算矩阵的逆
# 3.计算矩阵的特征值和特征向量
# 4. 解线性方程组
# 5.计算矩阵的奇异值分解
# 6.计算矩阵的QR分解
# 7.计算矩阵的Cholesky分解
# 8.计算矩阵的迹
# 9.计算矩阵的范数
# 10.计算矩阵的秩
print("---------------------")
"""高级练习题"""
"""高级应用"""
print("高级应用")
print("---------------------")
# 1.实现一个简单的神经网络前向传播
# 2.计算两个矩阵的卷积
# 3.实现图像处理中的滤波操作
# 4.计算数组的快速傅里叶变换
# 5.计算数组的逆傅里叶变换
# 6.实现一个简单的PCA降维
# 7.计算数组的移动窗口统计量
# 8.实现数组的广播机制示例
# 9.使用NumPy实现线性回归
# 10.使用NumPy实现逻辑回归
print("---------------------")
"""性能优化"""
print("性能优化")
print("---------------------")
# 1.比较不同数组操作方法的性能
# 2.使用向量化操作替代循环
# 3.使用NumPy的einsum函数优化计算
# 4.使用内存视图减少内存使用
# 5.使用NumPy的strides实现高效滑动窗口
print("---------------------")
"""综合项目"""
print("综合项目")
print("---------------------")
# 1实现一个简单的图像处理管道（灰度化，滤波等）
